{"version":3,"sources":["pages/home.jsx","index.js"],"names":["Home","useState","grocery","setGrocery","displayGrocery","setDisplayGrocery","error","setError","activeInput","setActiveInput","editInput","setEditInput","editId","setEditId","listAddedText","setListAddedText","editedText","setEditedText","deletedList","setDeletedList","emptyList","setEmptyList","useEffect","addedTimer","setTimeout","clearTimeout","className","onSubmit","eventhandler","preventDefault","list","id","Date","getTime","toString","console","log","type","placeholder","value","name","maxLength","onChange","defaultEvent","target","onFocus","onClick","map","singleUpdatedEdit","singleList","filter","singleEditedId","singleEditedItem","handleEdit","deletedId","deletedItem","singleDeletedItem","handleDelete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b8c6701.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './home.css';\r\nimport { FiEdit } from 'react-icons/fi';\r\nimport  {AiOutlineDelete} from 'react-icons/ai'\r\n\r\nexport default function Home() {\r\n\r\n    const [grocery, setGrocery] = useState('');\r\n    const [displayGrocery, setDisplayGrocery] = useState([]);\r\n    const [error, setError] = useState(false);\r\n    const [activeInput, setActiveInput] = useState(true);\r\n    const [editInput, setEditInput] = useState(false);\r\n    const [editId, setEditId] = useState('');\r\n    const [listAddedText, setListAddedText] = useState(false);\r\n    const [editedText, setEditedText] = useState(false);\r\n    const [deletedList, setDeletedList] = useState(false);\r\n    const [emptyList, setEmptyList] = useState(false);\r\n   const text = 'Item changed!';\r\n   const deletedText = 'Item removed';\r\n   const clearText = 'List is empty';\r\n\r\n\r\n    const handleinputBox = (defaultEvent) =>{\r\n            const value = defaultEvent.target.value;\r\n            setGrocery(value);\r\n    };\r\n\r\n    const handleSubmit = (eventhandler) =>{\r\n        eventhandler.preventDefault();\r\n        if(grocery){\r\n              \r\n        const list = {id: new Date().getTime().toString(), grocery}\r\n        setDisplayGrocery([...displayGrocery, list]);\r\n        setListAddedText(true)\r\n        setEditedText(false)\r\n        setError(false);\r\n        \r\n        }\r\n        else{\r\n                setError(true)\r\n                console.log('Error')\r\n        }\r\n        setGrocery('') \r\n       /*setDisplayGrocery((displayGrocery)=>{\r\n           return [...displayGrocery, list]\r\n       })*/\r\n    };\r\n\r\n    const handleDelete = (deletedId) =>{\r\n        let deletedItem = displayGrocery.filter((singleDeletedItem) => singleDeletedItem.id !== deletedId)\r\n        setDisplayGrocery(deletedItem);\r\n        setDeletedList(true);\r\n        setEmptyList(false)\r\n\r\n    };\r\n\r\n    const handleEdit = (editId) =>{\r\n        let editedItem = displayGrocery.filter((singleEditedId) => singleEditedId.id === editId);\r\n        editedItem.map((singleEditedItem) =>{\r\n            const {id, grocery} = singleEditedItem;\r\n            setActiveInput(false);\r\n            setEditInput(true)\r\n            setGrocery(grocery);\r\n            setEditId(id)\r\n            \r\n        })\r\n    };\r\n    \r\n    const handleEditInput = ()=>{\r\n        setDisplayGrocery(\r\n            displayGrocery.map((singleUpdatedEdit)=>{\r\n                if(singleUpdatedEdit.id === editId){\r\n                    setActiveInput(true);\r\n                    setEditInput(false);\r\n                    setListAddedText(true)\r\n                    setEditedText(true)\r\n                    return {...singleUpdatedEdit, grocery};\r\n                }\r\n                setGrocery('')\r\n                return singleUpdatedEdit;\r\n    })\r\n        )\r\n   \r\n    }\r\n    const HandleCLear = ()=>{\r\n        setDisplayGrocery([]);\r\n        setDeletedList(true);\r\n        setEmptyList(true)\r\n    }\r\n    \r\n    useEffect  (() => {\r\n        let addedTimer = setTimeout(() => {\r\n            setListAddedText(false)\r\n             setDeletedList(false)\r\n        }, 2000);\r\n        return () => {\r\n            clearTimeout(addedTimer);\r\n        }\r\n    }, [listAddedText, deletedList]);\r\n\r\n    const handleFocus = ()=>{\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <section className='wrapper'>\r\n                <div className={listAddedText ? 'addedList': 'addedList1'} ><h4 className=\"addedTexth4\" >{editedText ? text:  'Item added successfully' }</h4></div>\r\n\r\n                <div className={deletedList? 'addedList': 'addedList1'}><h4 className=\"addedTexth4\" >{emptyList? clearText : deletedText}</h4></div>\r\n        \r\n                <h3 className=\"pageTitle\">Grocery Bud</h3>\r\n                <form onSubmit={handleSubmit}>\r\n                   \r\n        \r\n                    <input className={error ? 'inputBox inputbox2': 'inputBox' } type=\"text\" placeholder='e.g Vegetables' \r\n                        value={grocery} id='inputcontainer' name='inputcontainer '\r\n                        maxLength=\"40\"\r\n                        onChange={handleinputBox}\r\n                        onFocus={handleFocus}\r\n                    /> \r\n                   \r\n                    <button className={`${activeInput ? 'btn': 'hideInput'}`} type='submit' >Submit</button>\r\n                    <button className={`${editInput ? 'btn': 'hideInput'}`} type='button' onClick={handleEditInput} >EditItem </button>\r\n\r\n                </form>\r\n                <div className=\"displayContainer\">\r\n                    {displayGrocery.map((singleList)=>{\r\n                        const {id, grocery} = singleList\r\n                         return (\r\n                         <>\r\n                         <div className='displayList' key={id}>\r\n                             \r\n                            <div className='textContainer'>\r\n                           <h4 className='displayText'>{grocery}</h4></div>\r\n                            \r\n                            <div className='iconContainer'>\r\n                            <FiEdit className=\"edit\" onClick={() => handleEdit(id)}/>\r\n                            <AiOutlineDelete className='delete'onClick={()=> handleDelete(id)}/>\r\n                            </div>\r\n                       \r\n                        </div>\r\n                        \r\n                     \r\n                         </>\r\n                         )\r\n                        })}\r\n                          \r\n                </div>\r\n                <button className=\"btn btnClear\" onClick={HandleCLear}>Clear List</button>\r\n            </section>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Home from \"./pages/home\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}